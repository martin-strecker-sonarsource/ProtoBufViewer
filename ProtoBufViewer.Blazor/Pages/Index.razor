@page "/"
@using Google.Protobuf
@using ProtoBuf.Logic
@using static ProtoBuf.Antlr.Protobuf3Parser


<MudGrid>
    <MudItem xs="12">
        <PageTitle>Protobuf Viewer</PageTitle>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudFileUpload T="IBrowserFile" Accept="*.proto" FilesChanged="MessageFileChanged" Hidden="@false" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0">
            <ButtonTemplate>
                @if (ProtoFile == null)
                {
                    <MudPaper Height="300px" Outlined="true" Class="@DefaultDragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop the proto definition file here or click
                        </MudText>
                    </MudPaper>
                }
                else
                {
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        Change '@ProtoFile.Name' definition file
                    </MudButton>
                }
            </ButtonTemplate>
        </MudFileUpload>
        <MudTreeView T="MessageViewModel" Items="Messages" Context="message" @bind-SelectedValue="SelectedMessage">
            <ItemTemplate>
                <MudTreeViewItem Items="@message.Nested" Text="@message.Name" Value="@message" />
            </ItemTemplate>
        </MudTreeView>
    </MudItem>
    <MudItem xs="12" sm="8">
        @if (SelectedMessage == null)
        {
            @if (ProtoFile != null)
            {
                <MudAlert Severity="Severity.Info" Style="margin-top: 10pt;">Select the root message type of the binary proto file</MudAlert>
            }
        }
        else
        {
            <MudFileUpload T="IBrowserFile" FilesChanged="BinFilesChanged" Hidden="@false" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0">
                <ButtonTemplate>
                    @if (ProtoBinFile == null)
                    {
                        <MudPaper Height="300px" Outlined="true" Class="@DefaultDragClass">
                            <MudText Typo="Typo.h6">
                                Drag and drop the binary proto file with root message <code>@SelectedMessage.Name</code> here or click
                            </MudText>
                        </MudPaper>
                    }
                    else
                    {
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Change '@ProtoBinFile.Name' binary proto file
                        </MudButton>
                    }
                </ButtonTemplate>
            </MudFileUpload>
        }

        <MudTreeView T="ProtoType" Items="TypedMessages" Context="typedValue">
            <ItemTemplate>
                @switch (typedValue)
                {
                    case TypedMessage message:
                        <MudTreeViewItem T="ProtoType" Items="@message.Fields.Select(x => (ProtoType)x).ToHashSet()" Text="@message.MessageType" />
                        break;
                    case TypedField field:
                        @if (field.Value is TypedMessage fieldMessage)
                        {
                            <MudTreeViewItem T="ProtoType" Items="@fieldMessage.Fields.Select(x => (ProtoType)x).ToHashSet()" Context="messageField">
                                <BodyContent>
                                    <MudText><b>@field.Name:&nbsp;</b></MudText>
                                    <MudText>@fieldMessage.MessageType</MudText>
                                    </BodyContent>
                                </MudTreeViewItem>
                        }
                        else
                        {
                            <MudTreeViewItem T="ProtoType">
                                <BodyContent>
                                    @switch (field.Value)
                                    {
                                        case TypedFloat x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedInt32 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedInt64 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedUint32 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedUint64 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedSint32 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedSint64 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedFixed32 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedFixed64 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedSfixed32 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedSfixed64 x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedBool x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedString x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedBytes x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                        case TypedUnknown x:
                                            <MudText><b>@field.Name:&nbsp;</b></MudText>
                                            <MudText>@x.Value</MudText>
                                            break;
                                    }
                                </BodyContent>
                            </MudTreeViewItem>
                        }
                        break;
                }
            </ItemTemplate>
        </MudTreeView>
    </MudItem>
</MudGrid>

@code
{
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private IBrowserFile? ProtoFile;
    private IBrowserFile? ProtoBinFile;
    HashSet<MessageViewModel> Messages { get; } = new();
    MessageViewModel? SelectedMessage { get; set; }
    ProtoContext? ParseResult { get; set; }

    HashSet<ProtoType>? TypedMessages { get; set; }

    private async Task MessageFileChanged(IBrowserFile file)
    {
        ProtoFile = file;
        Messages.Clear();
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        ms.Position = 0;
        ParseResult = ProtoParser.ParseFile(ms);
        var visitor = new MessageViewModel.Visitor();
        visitor.Visit(ParseResult);
        foreach (var m in visitor.Messages.Where(x => x.Parent == null))
        {
            Messages.Add(m);
        }
    }

    private async Task BinFilesChanged(IBrowserFile file)
    {
        ProtoBinFile = file;
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        ms.Position = 0;
        using var coded = CodedInputStream.CreateWithLimits(ms, int.MaxValue, int.MaxValue);
        var decoder = new TypedMessageDecoder();
        var result = decoder.Parse(coded, ParseResult, SelectedMessage.MessageDefContext);
        TypedMessages = new(result);
    }
}