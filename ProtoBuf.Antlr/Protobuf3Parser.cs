//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Protobuf3.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Protobuf3Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SYNTAX=1, IMPORT=2, WEAK=3, PUBLIC=4, PACKAGE=5, OPTION=6, OPTIONAL=7, 
		REPEATED=8, ONEOF=9, MAP=10, INT32=11, INT64=12, UINT32=13, UINT64=14, 
		SINT32=15, SINT64=16, FIXED32=17, FIXED64=18, SFIXED32=19, SFIXED64=20, 
		BOOL=21, STRING=22, DOUBLE=23, FLOAT=24, BYTES=25, RESERVED=26, TO=27, 
		MAX=28, ENUM=29, MESSAGE=30, SERVICE=31, EXTEND=32, RPC=33, STREAM=34, 
		RETURNS=35, PROTO3_LIT_SINGLE=36, PROTO3_LIT_DOBULE=37, SEMI=38, EQ=39, 
		LP=40, RP=41, LB=42, RB=43, LC=44, RC=45, LT=46, GT=47, DOT=48, COMMA=49, 
		COLON=50, PLUS=51, MINUS=52, STR_LIT=53, BOOL_LIT=54, FLOAT_LIT=55, INT_LIT=56, 
		IDENTIFIER=57, WS=58, LINE_COMMENT=59, COMMENT=60;
	public const int
		RULE_proto = 0, RULE_syntax = 1, RULE_importStatement = 2, RULE_packageStatement = 3, 
		RULE_optionStatement = 4, RULE_optionName = 5, RULE_fieldLabel = 6, RULE_field = 7, 
		RULE_fieldOptions = 8, RULE_fieldOption = 9, RULE_fieldNumber = 10, RULE_oneof = 11, 
		RULE_oneofField = 12, RULE_mapField = 13, RULE_keyType = 14, RULE_type_ = 15, 
		RULE_reserved = 16, RULE_ranges = 17, RULE_range_ = 18, RULE_reservedFieldNames = 19, 
		RULE_topLevelDef = 20, RULE_enumDef = 21, RULE_enumBody = 22, RULE_enumElement = 23, 
		RULE_enumField = 24, RULE_enumValueOptions = 25, RULE_enumValueOption = 26, 
		RULE_messageDef = 27, RULE_messageBody = 28, RULE_messageElement = 29, 
		RULE_extendDef = 30, RULE_serviceDef = 31, RULE_serviceElement = 32, RULE_rpc = 33, 
		RULE_constant = 34, RULE_blockLit = 35, RULE_emptyStatement_ = 36, RULE_ident = 37, 
		RULE_fullIdent = 38, RULE_messageName = 39, RULE_enumName = 40, RULE_fieldName = 41, 
		RULE_oneofName = 42, RULE_mapName = 43, RULE_serviceName = 44, RULE_rpcName = 45, 
		RULE_messageType = 46, RULE_enumType = 47, RULE_intLit = 48, RULE_strLit = 49, 
		RULE_boolLit = 50, RULE_floatLit = 51, RULE_keywords = 52;
	public static readonly string[] ruleNames = {
		"proto", "syntax", "importStatement", "packageStatement", "optionStatement", 
		"optionName", "fieldLabel", "field", "fieldOptions", "fieldOption", "fieldNumber", 
		"oneof", "oneofField", "mapField", "keyType", "type_", "reserved", "ranges", 
		"range_", "reservedFieldNames", "topLevelDef", "enumDef", "enumBody", 
		"enumElement", "enumField", "enumValueOptions", "enumValueOption", "messageDef", 
		"messageBody", "messageElement", "extendDef", "serviceDef", "serviceElement", 
		"rpc", "constant", "blockLit", "emptyStatement_", "ident", "fullIdent", 
		"messageName", "enumName", "fieldName", "oneofName", "mapName", "serviceName", 
		"rpcName", "messageType", "enumType", "intLit", "strLit", "boolLit", "floatLit", 
		"keywords"
	};

	private static readonly string[] _LiteralNames = {
		null, "'syntax'", "'import'", "'weak'", "'public'", "'package'", "'option'", 
		"'optional'", "'repeated'", "'oneof'", "'map'", "'int32'", "'int64'", 
		"'uint32'", "'uint64'", "'sint32'", "'sint64'", "'fixed32'", "'fixed64'", 
		"'sfixed32'", "'sfixed64'", "'bool'", "'string'", "'double'", "'float'", 
		"'bytes'", "'reserved'", "'to'", "'max'", "'enum'", "'message'", "'service'", 
		"'extend'", "'rpc'", "'stream'", "'returns'", "'\"proto3\"'", "''proto3''", 
		"';'", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
		"'.'", "','", "':'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SYNTAX", "IMPORT", "WEAK", "PUBLIC", "PACKAGE", "OPTION", "OPTIONAL", 
		"REPEATED", "ONEOF", "MAP", "INT32", "INT64", "UINT32", "UINT64", "SINT32", 
		"SINT64", "FIXED32", "FIXED64", "SFIXED32", "SFIXED64", "BOOL", "STRING", 
		"DOUBLE", "FLOAT", "BYTES", "RESERVED", "TO", "MAX", "ENUM", "MESSAGE", 
		"SERVICE", "EXTEND", "RPC", "STREAM", "RETURNS", "PROTO3_LIT_SINGLE", 
		"PROTO3_LIT_DOBULE", "SEMI", "EQ", "LP", "RP", "LB", "RB", "LC", "RC", 
		"LT", "GT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", "STR_LIT", "BOOL_LIT", 
		"FLOAT_LIT", "INT_LIT", "IDENTIFIER", "WS", "LINE_COMMENT", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Protobuf3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Protobuf3Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Protobuf3Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Protobuf3Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProtoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxContext syntax() {
			return GetRuleContext<SyntaxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Protobuf3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageStatementContext[] packageStatement() {
			return GetRuleContexts<PackageStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageStatementContext packageStatement(int i) {
			return GetRuleContext<PackageStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext[] optionStatement() {
			return GetRuleContexts<OptionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext optionStatement(int i) {
			return GetRuleContext<OptionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDefContext[] topLevelDef() {
			return GetRuleContexts<TopLevelDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDefContext topLevelDef(int i) {
			return GetRuleContext<TopLevelDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		public ProtoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterProto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitProto(this);
		}
	}

	[RuleVersion(0)]
	public ProtoContext proto() {
		ProtoContext _localctx = new ProtoContext(Context, State);
		EnterRule(_localctx, 0, RULE_proto);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			syntax();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 282930970724L) != 0)) {
				{
				State = 112;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IMPORT:
					{
					State = 107;
					importStatement();
					}
					break;
				case PACKAGE:
					{
					State = 108;
					packageStatement();
					}
					break;
				case OPTION:
					{
					State = 109;
					optionStatement();
					}
					break;
				case ENUM:
				case MESSAGE:
				case SERVICE:
				case EXTEND:
					{
					State = 110;
					topLevelDef();
					}
					break;
				case SEMI:
					{
					State = 111;
					emptyStatement_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNTAX() { return GetToken(Protobuf3Parser.SYNTAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO3_LIT_SINGLE() { return GetToken(Protobuf3Parser.PROTO3_LIT_SINGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO3_LIT_DOBULE() { return GetToken(Protobuf3Parser.PROTO3_LIT_DOBULE, 0); }
		public SyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterSyntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitSyntax(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxContext syntax() {
		SyntaxContext _localctx = new SyntaxContext(Context, State);
		EnterRule(_localctx, 2, RULE_syntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(SYNTAX);
			State = 120;
			Match(EQ);
			State = 121;
			_la = TokenStream.LA(1);
			if ( !(_la==PROTO3_LIT_SINGLE || _la==PROTO3_LIT_DOBULE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 122;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Protobuf3Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrLitContext strLit() {
			return GetRuleContext<StrLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(Protobuf3Parser.WEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Protobuf3Parser.PUBLIC, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(IMPORT);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WEAK || _la==PUBLIC) {
				{
				State = 125;
				_la = TokenStream.LA(1);
				if ( !(_la==WEAK || _la==PUBLIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 128;
			strLit();
			State = 129;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(Protobuf3Parser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		public PackageStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterPackageStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitPackageStatement(this);
		}
	}

	[RuleVersion(0)]
	public PackageStatementContext packageStatement() {
		PackageStatementContext _localctx = new PackageStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_packageStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(PACKAGE);
			State = 132;
			fullIdent();
			State = 133;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(Protobuf3Parser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		public OptionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOptionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOptionStatement(this);
		}
	}

	[RuleVersion(0)]
	public OptionStatementContext optionStatement() {
		OptionStatementContext _localctx = new OptionStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_optionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(OPTION);
			State = 136;
			optionName();
			State = 137;
			Match(EQ);
			State = 138;
			constant();
			State = 139;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdentContext[] fullIdent() {
			return GetRuleContexts<FullIdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdentContext fullIdent(int i) {
			return GetRuleContext<FullIdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(Protobuf3Parser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(Protobuf3Parser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Protobuf3Parser.DOT, 0); }
		public OptionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOptionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOptionName(this);
		}
	}

	[RuleVersion(0)]
	public OptionNameContext optionName() {
		OptionNameContext _localctx = new OptionNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionName);
		int _la;
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case OPTIONAL:
			case REPEATED:
			case ONEOF:
			case MAP:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case BOOL:
			case STRING:
			case DOUBLE:
			case FLOAT:
			case BYTES:
			case RESERVED:
			case TO:
			case MAX:
			case ENUM:
			case MESSAGE:
			case SERVICE:
			case EXTEND:
			case RPC:
			case STREAM:
			case RETURNS:
			case BOOL_LIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				fullIdent();
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				Match(LP);
				State = 143;
				fullIdent();
				State = 144;
				Match(RP);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 145;
					Match(DOT);
					State = 146;
					fullIdent();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(Protobuf3Parser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(Protobuf3Parser.REPEATED, 0); }
		public FieldLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldLabel(this);
		}
	}

	[RuleVersion(0)]
	public FieldLabelContext fieldLabel() {
		FieldLabelContext _localctx = new FieldLabelContext(Context, State);
		EnterRule(_localctx, 12, RULE_fieldLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(_la==OPTIONAL || _la==REPEATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLabelContext fieldLabel() {
			return GetRuleContext<FieldLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(Protobuf3Parser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(Protobuf3Parser.RB, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 14, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 153;
				fieldLabel();
				}
				break;
			}
			State = 156;
			type_();
			State = 157;
			fieldName();
			State = 158;
			Match(EQ);
			State = 159;
			fieldNumber();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LB) {
				{
				State = 160;
				Match(LB);
				State = 161;
				fieldOptions();
				State = 162;
				Match(RB);
				}
			}

			State = 166;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionContext[] fieldOption() {
			return GetRuleContexts<FieldOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionContext fieldOption(int i) {
			return GetRuleContext<FieldOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Protobuf3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Protobuf3Parser.COMMA, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			fieldOption();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 169;
				Match(COMMA);
				State = 170;
				fieldOption();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FieldOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldOption(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionContext fieldOption() {
		FieldOptionContext _localctx = new FieldOptionContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			optionName();
			State = 177;
			Match(EQ);
			State = 178;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLitContext intLit() {
			return GetRuleContext<IntLitContext>(0);
		}
		public FieldNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldNumber(this);
		}
	}

	[RuleVersion(0)]
	public FieldNumberContext fieldNumber() {
		FieldNumberContext _localctx = new FieldNumberContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			intLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(Protobuf3Parser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OneofNameContext oneofName() {
			return GetRuleContext<OneofNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext[] optionStatement() {
			return GetRuleContexts<OptionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext optionStatement(int i) {
			return GetRuleContext<OptionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofFieldContext[] oneofField() {
			return GetRuleContexts<OneofFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofFieldContext oneofField(int i) {
			return GetRuleContext<OneofFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		public OneofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOneof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOneof(this);
		}
	}

	[RuleVersion(0)]
	public OneofContext oneof() {
		OneofContext _localctx = new OneofContext(Context, State);
		EnterRule(_localctx, 22, RULE_oneof);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ONEOF);
			State = 183;
			oneofName();
			State = 184;
			Match(LC);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162411405159432190L) != 0)) {
				{
				State = 188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 185;
					optionStatement();
					}
					break;
				case 2:
					{
					State = 186;
					oneofField();
					}
					break;
				case 3:
					{
					State = 187;
					emptyStatement_();
					}
					break;
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(Protobuf3Parser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(Protobuf3Parser.RB, 0); }
		public OneofFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOneofField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOneofField(this);
		}
	}

	[RuleVersion(0)]
	public OneofFieldContext oneofField() {
		OneofFieldContext _localctx = new OneofFieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_oneofField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			type_();
			State = 196;
			fieldName();
			State = 197;
			Match(EQ);
			State = 198;
			fieldNumber();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LB) {
				{
				State = 199;
				Match(LB);
				State = 200;
				fieldOptions();
				State = 201;
				Match(RB);
				}
			}

			State = 205;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(Protobuf3Parser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Protobuf3Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyTypeContext keyType() {
			return GetRuleContext<KeyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Protobuf3Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Protobuf3Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapNameContext mapName() {
			return GetRuleContext<MapNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(Protobuf3Parser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(Protobuf3Parser.RB, 0); }
		public MapFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMapField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMapField(this);
		}
	}

	[RuleVersion(0)]
	public MapFieldContext mapField() {
		MapFieldContext _localctx = new MapFieldContext(Context, State);
		EnterRule(_localctx, 26, RULE_mapField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(MAP);
			State = 208;
			Match(LT);
			State = 209;
			keyType();
			State = 210;
			Match(COMMA);
			State = 211;
			type_();
			State = 212;
			Match(GT);
			State = 213;
			mapName();
			State = 214;
			Match(EQ);
			State = 215;
			fieldNumber();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LB) {
				{
				State = 216;
				Match(LB);
				State = 217;
				fieldOptions();
				State = 218;
				Match(RB);
				}
			}

			State = 222;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT32() { return GetToken(Protobuf3Parser.INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(Protobuf3Parser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT32() { return GetToken(Protobuf3Parser.UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT64() { return GetToken(Protobuf3Parser.UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT32() { return GetToken(Protobuf3Parser.SINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT64() { return GetToken(Protobuf3Parser.SINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED32() { return GetToken(Protobuf3Parser.FIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED64() { return GetToken(Protobuf3Parser.FIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED32() { return GetToken(Protobuf3Parser.SFIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED64() { return GetToken(Protobuf3Parser.SFIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(Protobuf3Parser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Protobuf3Parser.STRING, 0); }
		public KeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterKeyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitKeyType(this);
		}
	}

	[RuleVersion(0)]
	public KeyTypeContext keyType() {
		KeyTypeContext _localctx = new KeyTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_keyType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8386560L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(Protobuf3Parser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(Protobuf3Parser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT32() { return GetToken(Protobuf3Parser.INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(Protobuf3Parser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT32() { return GetToken(Protobuf3Parser.UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT64() { return GetToken(Protobuf3Parser.UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT32() { return GetToken(Protobuf3Parser.SINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT64() { return GetToken(Protobuf3Parser.SINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED32() { return GetToken(Protobuf3Parser.FIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED64() { return GetToken(Protobuf3Parser.FIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED32() { return GetToken(Protobuf3Parser.SFIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED64() { return GetToken(Protobuf3Parser.SFIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(Protobuf3Parser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Protobuf3Parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(Protobuf3Parser.BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeContext messageType() {
			return GetRuleContext<MessageTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 30, RULE_type_);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				Match(DOUBLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				Match(FLOAT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				Match(INT32);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229;
				Match(INT64);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 230;
				Match(UINT32);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 231;
				Match(UINT64);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 232;
				Match(SINT32);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 233;
				Match(SINT64);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 234;
				Match(FIXED32);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 235;
				Match(FIXED64);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 236;
				Match(SFIXED32);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 237;
				Match(SFIXED64);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 238;
				Match(BOOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 239;
				Match(STRING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 240;
				Match(BYTES);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 241;
				messageType();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 242;
				enumType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(Protobuf3Parser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangesContext ranges() {
			return GetRuleContext<RangesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedFieldNamesContext reservedFieldNames() {
			return GetRuleContext<ReservedFieldNamesContext>(0);
		}
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 32, RULE_reserved);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(RESERVED);
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LIT:
				{
				State = 246;
				ranges();
				}
				break;
			case PROTO3_LIT_SINGLE:
			case PROTO3_LIT_DOBULE:
			case STR_LIT:
				{
				State = 247;
				reservedFieldNames();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 250;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_Context[] range_() {
			return GetRuleContexts<Range_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_Context range_(int i) {
			return GetRuleContext<Range_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Protobuf3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Protobuf3Parser.COMMA, i);
		}
		public RangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRanges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRanges(this);
		}
	}

	[RuleVersion(0)]
	public RangesContext ranges() {
		RangesContext _localctx = new RangesContext(Context, State);
		EnterRule(_localctx, 34, RULE_ranges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			range_();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 253;
				Match(COMMA);
				State = 254;
				range_();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLitContext[] intLit() {
			return GetRuleContexts<IntLitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntLitContext intLit(int i) {
			return GetRuleContext<IntLitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Protobuf3Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(Protobuf3Parser.MAX, 0); }
		public Range_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRange_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRange_(this);
		}
	}

	[RuleVersion(0)]
	public Range_Context range_() {
		Range_Context _localctx = new Range_Context(Context, State);
		EnterRule(_localctx, 36, RULE_range_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			intLit();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 261;
				Match(TO);
				State = 264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_LIT:
					{
					State = 262;
					intLit();
					}
					break;
				case MAX:
					{
					State = 263;
					Match(MAX);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedFieldNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrLitContext[] strLit() {
			return GetRuleContexts<StrLitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLitContext strLit(int i) {
			return GetRuleContext<StrLitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Protobuf3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Protobuf3Parser.COMMA, i);
		}
		public ReservedFieldNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedFieldNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterReservedFieldNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitReservedFieldNames(this);
		}
	}

	[RuleVersion(0)]
	public ReservedFieldNamesContext reservedFieldNames() {
		ReservedFieldNamesContext _localctx = new ReservedFieldNamesContext(Context, State);
		EnterRule(_localctx, 38, RULE_reservedFieldNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			strLit();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 269;
				Match(COMMA);
				State = 270;
				strLit();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageDefContext messageDef() {
			return GetRuleContext<MessageDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef() {
			return GetRuleContext<EnumDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendDefContext extendDef() {
			return GetRuleContext<ExtendDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServiceDefContext serviceDef() {
			return GetRuleContext<ServiceDefContext>(0);
		}
		public TopLevelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterTopLevelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitTopLevelDef(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDefContext topLevelDef() {
		TopLevelDefContext _localctx = new TopLevelDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_topLevelDef);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MESSAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				messageDef();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				enumDef();
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				extendDef();
				}
				break;
			case SERVICE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				serviceDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(Protobuf3Parser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumDef(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(ENUM);
			State = 283;
			enumName();
			State = 284;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementContext[] enumElement() {
			return GetRuleContexts<EnumElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementContext enumElement(int i) {
			return GetRuleContext<EnumElementContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(LC);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162129930182721534L) != 0)) {
				{
				{
				State = 287;
				enumElement();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 293;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext optionStatement() {
			return GetRuleContext<OptionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField() {
			return GetRuleContext<EnumFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumElement(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumElement);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				optionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				enumField();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				emptyStatement_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntLitContext intLit() {
			return GetRuleContext<IntLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Protobuf3Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueOptionsContext enumValueOptions() {
			return GetRuleContext<EnumValueOptionsContext>(0);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ident();
			State = 301;
			Match(EQ);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 302;
				Match(MINUS);
				}
			}

			State = 305;
			intLit();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LB) {
				{
				State = 306;
				enumValueOptions();
				}
			}

			State = 309;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(Protobuf3Parser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueOptionContext[] enumValueOption() {
			return GetRuleContexts<EnumValueOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueOptionContext enumValueOption(int i) {
			return GetRuleContext<EnumValueOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(Protobuf3Parser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Protobuf3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Protobuf3Parser.COMMA, i);
		}
		public EnumValueOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumValueOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumValueOptions(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueOptionsContext enumValueOptions() {
		EnumValueOptionsContext _localctx = new EnumValueOptionsContext(Context, State);
		EnterRule(_localctx, 50, RULE_enumValueOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(LB);
			State = 312;
			enumValueOption();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 313;
				Match(COMMA);
				State = 314;
				enumValueOption();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 320;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Protobuf3Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public EnumValueOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumValueOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumValueOption(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueOptionContext enumValueOption() {
		EnumValueOptionContext _localctx = new EnumValueOptionContext(Context, State);
		EnterRule(_localctx, 52, RULE_enumValueOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			optionName();
			State = 323;
			Match(EQ);
			State = 324;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(Protobuf3Parser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageBodyContext messageBody() {
			return GetRuleContext<MessageBodyContext>(0);
		}
		public MessageDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageDef(this);
		}
	}

	[RuleVersion(0)]
	public MessageDefContext messageDef() {
		MessageDefContext _localctx = new MessageDefContext(Context, State);
		EnterRule(_localctx, 54, RULE_messageDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(MESSAGE);
			State = 327;
			messageName();
			State = 328;
			messageBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext[] messageElement() {
			return GetRuleContexts<MessageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext messageElement(int i) {
			return GetRuleContext<MessageElementContext>(i);
		}
		public MessageBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageBody(this);
		}
	}

	[RuleVersion(0)]
	public MessageBodyContext messageBody() {
		MessageBodyContext _localctx = new MessageBodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_messageBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(LC);
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162411405159432190L) != 0)) {
				{
				{
				State = 331;
				messageElement();
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 337;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef() {
			return GetRuleContext<EnumDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageDefContext messageDef() {
			return GetRuleContext<MessageDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendDefContext extendDef() {
			return GetRuleContext<ExtendDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext optionStatement() {
			return GetRuleContext<OptionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofContext oneof() {
			return GetRuleContext<OneofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapFieldContext mapField() {
			return GetRuleContext<MapFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved() {
			return GetRuleContext<ReservedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public MessageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageElement(this);
		}
	}

	[RuleVersion(0)]
	public MessageElementContext messageElement() {
		MessageElementContext _localctx = new MessageElementContext(Context, State);
		EnterRule(_localctx, 58, RULE_messageElement);
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				enumDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 341;
				messageDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 342;
				extendDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 343;
				optionStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 344;
				oneof();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 345;
				mapField();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 346;
				reserved();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 347;
				emptyStatement_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(Protobuf3Parser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeContext messageType() {
			return GetRuleContext<MessageTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		public ExtendDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterExtendDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitExtendDef(this);
		}
	}

	[RuleVersion(0)]
	public ExtendDefContext extendDef() {
		ExtendDefContext _localctx = new ExtendDefContext(Context, State);
		EnterRule(_localctx, 60, RULE_extendDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(EXTEND);
			State = 351;
			messageType();
			State = 352;
			Match(LC);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162411405159432190L) != 0)) {
				{
				State = 355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SYNTAX:
				case IMPORT:
				case WEAK:
				case PUBLIC:
				case PACKAGE:
				case OPTION:
				case OPTIONAL:
				case REPEATED:
				case ONEOF:
				case MAP:
				case INT32:
				case INT64:
				case UINT32:
				case UINT64:
				case SINT32:
				case SINT64:
				case FIXED32:
				case FIXED64:
				case SFIXED32:
				case SFIXED64:
				case BOOL:
				case STRING:
				case DOUBLE:
				case FLOAT:
				case BYTES:
				case RESERVED:
				case TO:
				case MAX:
				case ENUM:
				case MESSAGE:
				case SERVICE:
				case EXTEND:
				case RPC:
				case STREAM:
				case RETURNS:
				case DOT:
				case BOOL_LIT:
				case IDENTIFIER:
					{
					State = 353;
					field();
					}
					break;
				case SEMI:
					{
					State = 354;
					emptyStatement_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 360;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(Protobuf3Parser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServiceNameContext serviceName() {
			return GetRuleContext<ServiceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServiceElementContext[] serviceElement() {
			return GetRuleContexts<ServiceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServiceElementContext serviceElement(int i) {
			return GetRuleContext<ServiceElementContext>(i);
		}
		public ServiceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterServiceDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitServiceDef(this);
		}
	}

	[RuleVersion(0)]
	public ServiceDefContext serviceDef() {
		ServiceDefContext _localctx = new ServiceDefContext(Context, State);
		EnterRule(_localctx, 62, RULE_serviceDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(SERVICE);
			State = 363;
			serviceName();
			State = 364;
			Match(LC);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 283467841600L) != 0)) {
				{
				{
				State = 365;
				serviceElement();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 371;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext optionStatement() {
			return GetRuleContext<OptionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpcContext rpc() {
			return GetRuleContext<RpcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public ServiceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterServiceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitServiceElement(this);
		}
	}

	[RuleVersion(0)]
	public ServiceElementContext serviceElement() {
		ServiceElementContext _localctx = new ServiceElementContext(Context, State);
		EnterRule(_localctx, 64, RULE_serviceElement);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				optionStatement();
				}
				break;
			case RPC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				rpc();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPC() { return GetToken(Protobuf3Parser.RPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RpcNameContext rpcName() {
			return GetRuleContext<RpcNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LP() { return GetTokens(Protobuf3Parser.LP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP(int i) {
			return GetToken(Protobuf3Parser.LP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeContext[] messageType() {
			return GetRuleContexts<MessageTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeContext messageType(int i) {
			return GetRuleContext<MessageTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RP() { return GetTokens(Protobuf3Parser.RP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP(int i) {
			return GetToken(Protobuf3Parser.RP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(Protobuf3Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STREAM() { return GetTokens(Protobuf3Parser.STREAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM(int i) {
			return GetToken(Protobuf3Parser.STREAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext[] optionStatement() {
			return GetRuleContexts<OptionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionStatementContext optionStatement(int i) {
			return GetRuleContext<OptionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRpc(this);
		}
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(Context, State);
		EnterRule(_localctx, 66, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(RPC);
			State = 379;
			rpcName();
			State = 380;
			Match(LP);
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 381;
				Match(STREAM);
				}
				break;
			}
			State = 384;
			messageType();
			State = 385;
			Match(RP);
			State = 386;
			Match(RETURNS);
			State = 387;
			Match(LP);
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 388;
				Match(STREAM);
				}
				break;
			}
			State = 391;
			messageType();
			State = 392;
			Match(RP);
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LC:
				{
				State = 393;
				Match(LC);
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPTION || _la==SEMI) {
					{
					State = 396;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPTION:
						{
						State = 394;
						optionStatement();
						}
						break;
					case SEMI:
						{
						State = 395;
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 401;
				Match(RC);
				}
				break;
			case SEMI:
				{
				State = 402;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntLitContext intLit() {
			return GetRuleContext<IntLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Protobuf3Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Protobuf3Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatLitContext floatLit() {
			return GetRuleContext<FloatLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLitContext strLit() {
			return GetRuleContext<StrLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLitContext boolLit() {
			return GetRuleContext<BoolLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockLitContext blockLit() {
			return GetRuleContext<BlockLitContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 68, RULE_constant);
		int _la;
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				fullIdent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 406;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 409;
				intLit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 410;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 413;
				floatLit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 414;
				strLit();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 415;
				boolLit();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 416;
				blockLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(Protobuf3Parser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(Protobuf3Parser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Protobuf3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Protobuf3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public BlockLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterBlockLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitBlockLit(this);
		}
	}

	[RuleVersion(0)]
	public BlockLitContext blockLit() {
		BlockLitContext _localctx = new BlockLitContext(Context, State);
		EnterRule(_localctx, 70, RULE_blockLit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(LC);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162129655304814590L) != 0)) {
				{
				{
				State = 420;
				ident();
				State = 421;
				Match(COLON);
				State = 422;
				constant();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 429;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Protobuf3Parser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 72, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Protobuf3Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 74, RULE_ident);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				Match(IDENTIFIER);
				}
				break;
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case OPTIONAL:
			case REPEATED:
			case ONEOF:
			case MAP:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case BOOL:
			case STRING:
			case DOUBLE:
			case FLOAT:
			case BYTES:
			case RESERVED:
			case TO:
			case MAX:
			case ENUM:
			case MESSAGE:
			case SERVICE:
			case EXTEND:
			case RPC:
			case STREAM:
			case RETURNS:
			case BOOL_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				keywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Protobuf3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Protobuf3Parser.DOT, i);
		}
		public FullIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFullIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFullIdent(this);
		}
	}

	[RuleVersion(0)]
	public FullIdentContext fullIdent() {
		FullIdentContext _localctx = new FullIdentContext(Context, State);
		EnterRule(_localctx, 76, RULE_fullIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ident();
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 438;
				Match(DOT);
				State = 439;
				ident();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public MessageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageName(this);
		}
	}

	[RuleVersion(0)]
	public MessageNameContext messageName() {
		MessageNameContext _localctx = new MessageNameContext(Context, State);
		EnterRule(_localctx, 78, RULE_messageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumName(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 82, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public OneofNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOneofName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOneofName(this);
		}
	}

	[RuleVersion(0)]
	public OneofNameContext oneofName() {
		OneofNameContext _localctx = new OneofNameContext(Context, State);
		EnterRule(_localctx, 84, RULE_oneofName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public MapNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMapName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMapName(this);
		}
	}

	[RuleVersion(0)]
	public MapNameContext mapName() {
		MapNameContext _localctx = new MapNameContext(Context, State);
		EnterRule(_localctx, 86, RULE_mapName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ServiceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterServiceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitServiceName(this);
		}
	}

	[RuleVersion(0)]
	public ServiceNameContext serviceName() {
		ServiceNameContext _localctx = new ServiceNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_serviceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public RpcNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpcName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRpcName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRpcName(this);
		}
	}

	[RuleVersion(0)]
	public RpcNameContext rpcName() {
		RpcNameContext _localctx = new RpcNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_rpcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Protobuf3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Protobuf3Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public MessageTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageType(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeContext messageType() {
		MessageTypeContext _localctx = new MessageTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_messageType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 459;
				Match(DOT);
				}
			}

			State = 467;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 462;
					ident();
					State = 463;
					Match(DOT);
					}
					} 
				}
				State = 469;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 470;
			messageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Protobuf3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Protobuf3Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_enumType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 472;
				Match(DOT);
				}
			}

			State = 480;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 475;
					ident();
					State = 476;
					Match(DOT);
					}
					} 
				}
				State = 482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 483;
			enumName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LIT() { return GetToken(Protobuf3Parser.INT_LIT, 0); }
		public IntLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterIntLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitIntLit(this);
		}
	}

	[RuleVersion(0)]
	public IntLitContext intLit() {
		IntLitContext _localctx = new IntLitContext(Context, State);
		EnterRule(_localctx, 96, RULE_intLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(INT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LIT() { return GetToken(Protobuf3Parser.STR_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO3_LIT_SINGLE() { return GetToken(Protobuf3Parser.PROTO3_LIT_SINGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO3_LIT_DOBULE() { return GetToken(Protobuf3Parser.PROTO3_LIT_DOBULE, 0); }
		public StrLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterStrLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitStrLit(this);
		}
	}

	[RuleVersion(0)]
	public StrLitContext strLit() {
		StrLitContext _localctx = new StrLitContext(Context, State);
		EnterRule(_localctx, 98, RULE_strLit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007405413171200L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LIT() { return GetToken(Protobuf3Parser.BOOL_LIT, 0); }
		public BoolLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterBoolLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitBoolLit(this);
		}
	}

	[RuleVersion(0)]
	public BoolLitContext boolLit() {
		BoolLitContext _localctx = new BoolLitContext(Context, State);
		EnterRule(_localctx, 100, RULE_boolLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(BOOL_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(Protobuf3Parser.FLOAT_LIT, 0); }
		public FloatLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFloatLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFloatLit(this);
		}
	}

	[RuleVersion(0)]
	public FloatLitContext floatLit() {
		FloatLitContext _localctx = new FloatLitContext(Context, State);
		EnterRule(_localctx, 102, RULE_floatLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(FLOAT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNTAX() { return GetToken(Protobuf3Parser.SYNTAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Protobuf3Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(Protobuf3Parser.WEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Protobuf3Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(Protobuf3Parser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(Protobuf3Parser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(Protobuf3Parser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(Protobuf3Parser.REPEATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(Protobuf3Parser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(Protobuf3Parser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT32() { return GetToken(Protobuf3Parser.INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(Protobuf3Parser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT32() { return GetToken(Protobuf3Parser.UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT64() { return GetToken(Protobuf3Parser.UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT32() { return GetToken(Protobuf3Parser.SINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT64() { return GetToken(Protobuf3Parser.SINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED32() { return GetToken(Protobuf3Parser.FIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED64() { return GetToken(Protobuf3Parser.FIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED32() { return GetToken(Protobuf3Parser.SFIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED64() { return GetToken(Protobuf3Parser.SFIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(Protobuf3Parser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Protobuf3Parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(Protobuf3Parser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(Protobuf3Parser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(Protobuf3Parser.BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(Protobuf3Parser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Protobuf3Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(Protobuf3Parser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(Protobuf3Parser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(Protobuf3Parser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(Protobuf3Parser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(Protobuf3Parser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPC() { return GetToken(Protobuf3Parser.RPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(Protobuf3Parser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(Protobuf3Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LIT() { return GetToken(Protobuf3Parser.BOOL_LIT, 0); }
		public KeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywords; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterKeywords(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitKeywords(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsContext keywords() {
		KeywordsContext _localctx = new KeywordsContext(Context, State);
		EnterRule(_localctx, 104, RULE_keywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014467228958718L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,60,496,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,5,0,113,8,0,10,0,
		12,0,116,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,127,8,2,1,2,1,2,1,
		2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
		148,8,5,3,5,150,8,5,1,6,1,6,1,7,3,7,155,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,3,7,165,8,7,1,7,1,7,1,8,1,8,1,8,5,8,172,8,8,10,8,12,8,175,9,8,1,
		9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,189,8,11,10,
		11,12,11,192,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
		12,204,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,221,8,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,244,
		8,15,1,16,1,16,1,16,3,16,249,8,16,1,16,1,16,1,17,1,17,1,17,5,17,256,8,
		17,10,17,12,17,259,9,17,1,18,1,18,1,18,1,18,3,18,265,8,18,3,18,267,8,18,
		1,19,1,19,1,19,5,19,272,8,19,10,19,12,19,275,9,19,1,20,1,20,1,20,1,20,
		3,20,281,8,20,1,21,1,21,1,21,1,21,1,22,1,22,5,22,289,8,22,10,22,12,22,
		292,9,22,1,22,1,22,1,23,1,23,1,23,3,23,299,8,23,1,24,1,24,1,24,3,24,304,
		8,24,1,24,1,24,3,24,308,8,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,316,8,
		25,10,25,12,25,319,9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
		27,1,28,1,28,5,28,333,8,28,10,28,12,28,336,9,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,349,8,29,1,30,1,30,1,30,1,30,1,30,
		5,30,356,8,30,10,30,12,30,359,9,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,
		367,8,31,10,31,12,31,370,9,31,1,31,1,31,1,32,1,32,1,32,3,32,377,8,32,1,
		33,1,33,1,33,1,33,3,33,383,8,33,1,33,1,33,1,33,1,33,1,33,3,33,390,8,33,
		1,33,1,33,1,33,1,33,1,33,5,33,397,8,33,10,33,12,33,400,9,33,1,33,1,33,
		3,33,404,8,33,1,34,1,34,3,34,408,8,34,1,34,1,34,3,34,412,8,34,1,34,1,34,
		1,34,1,34,3,34,418,8,34,1,35,1,35,1,35,1,35,1,35,5,35,425,8,35,10,35,12,
		35,428,9,35,1,35,1,35,1,36,1,36,1,37,1,37,3,37,436,8,37,1,38,1,38,1,38,
		5,38,441,8,38,10,38,12,38,444,9,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
		1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,3,46,461,8,46,1,46,1,46,1,46,5,
		46,466,8,46,10,46,12,46,469,9,46,1,46,1,46,1,47,3,47,474,8,47,1,47,1,47,
		1,47,5,47,479,8,47,10,47,12,47,482,9,47,1,47,1,47,1,48,1,48,1,49,1,49,
		1,50,1,50,1,51,1,51,1,52,1,52,1,52,0,0,53,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,0,7,1,0,36,37,
		1,0,3,4,1,0,7,8,1,0,11,22,1,0,51,52,2,0,36,37,53,53,2,0,1,35,54,54,521,
		0,106,1,0,0,0,2,119,1,0,0,0,4,124,1,0,0,0,6,131,1,0,0,0,8,135,1,0,0,0,
		10,149,1,0,0,0,12,151,1,0,0,0,14,154,1,0,0,0,16,168,1,0,0,0,18,176,1,0,
		0,0,20,180,1,0,0,0,22,182,1,0,0,0,24,195,1,0,0,0,26,207,1,0,0,0,28,224,
		1,0,0,0,30,243,1,0,0,0,32,245,1,0,0,0,34,252,1,0,0,0,36,260,1,0,0,0,38,
		268,1,0,0,0,40,280,1,0,0,0,42,282,1,0,0,0,44,286,1,0,0,0,46,298,1,0,0,
		0,48,300,1,0,0,0,50,311,1,0,0,0,52,322,1,0,0,0,54,326,1,0,0,0,56,330,1,
		0,0,0,58,348,1,0,0,0,60,350,1,0,0,0,62,362,1,0,0,0,64,376,1,0,0,0,66,378,
		1,0,0,0,68,417,1,0,0,0,70,419,1,0,0,0,72,431,1,0,0,0,74,435,1,0,0,0,76,
		437,1,0,0,0,78,445,1,0,0,0,80,447,1,0,0,0,82,449,1,0,0,0,84,451,1,0,0,
		0,86,453,1,0,0,0,88,455,1,0,0,0,90,457,1,0,0,0,92,460,1,0,0,0,94,473,1,
		0,0,0,96,485,1,0,0,0,98,487,1,0,0,0,100,489,1,0,0,0,102,491,1,0,0,0,104,
		493,1,0,0,0,106,114,3,2,1,0,107,113,3,4,2,0,108,113,3,6,3,0,109,113,3,
		8,4,0,110,113,3,40,20,0,111,113,3,72,36,0,112,107,1,0,0,0,112,108,1,0,
		0,0,112,109,1,0,0,0,112,110,1,0,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,
		112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,5,
		0,0,1,118,1,1,0,0,0,119,120,5,1,0,0,120,121,5,39,0,0,121,122,7,0,0,0,122,
		123,5,38,0,0,123,3,1,0,0,0,124,126,5,2,0,0,125,127,7,1,0,0,126,125,1,0,
		0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,3,98,49,0,129,130,5,38,0,0,
		130,5,1,0,0,0,131,132,5,5,0,0,132,133,3,76,38,0,133,134,5,38,0,0,134,7,
		1,0,0,0,135,136,5,6,0,0,136,137,3,10,5,0,137,138,5,39,0,0,138,139,3,68,
		34,0,139,140,5,38,0,0,140,9,1,0,0,0,141,150,3,76,38,0,142,143,5,40,0,0,
		143,144,3,76,38,0,144,147,5,41,0,0,145,146,5,48,0,0,146,148,3,76,38,0,
		147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,141,1,0,0,0,149,142,
		1,0,0,0,150,11,1,0,0,0,151,152,7,2,0,0,152,13,1,0,0,0,153,155,3,12,6,0,
		154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,3,30,15,0,157,
		158,3,82,41,0,158,159,5,39,0,0,159,164,3,20,10,0,160,161,5,42,0,0,161,
		162,3,16,8,0,162,163,5,43,0,0,163,165,1,0,0,0,164,160,1,0,0,0,164,165,
		1,0,0,0,165,166,1,0,0,0,166,167,5,38,0,0,167,15,1,0,0,0,168,173,3,18,9,
		0,169,170,5,49,0,0,170,172,3,18,9,0,171,169,1,0,0,0,172,175,1,0,0,0,173,
		171,1,0,0,0,173,174,1,0,0,0,174,17,1,0,0,0,175,173,1,0,0,0,176,177,3,10,
		5,0,177,178,5,39,0,0,178,179,3,68,34,0,179,19,1,0,0,0,180,181,3,96,48,
		0,181,21,1,0,0,0,182,183,5,9,0,0,183,184,3,84,42,0,184,190,5,44,0,0,185,
		189,3,8,4,0,186,189,3,24,12,0,187,189,3,72,36,0,188,185,1,0,0,0,188,186,
		1,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,
		0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,5,45,0,0,194,23,1,0,0,0,195,
		196,3,30,15,0,196,197,3,82,41,0,197,198,5,39,0,0,198,203,3,20,10,0,199,
		200,5,42,0,0,200,201,3,16,8,0,201,202,5,43,0,0,202,204,1,0,0,0,203,199,
		1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,5,38,0,0,206,25,1,0,0,
		0,207,208,5,10,0,0,208,209,5,46,0,0,209,210,3,28,14,0,210,211,5,49,0,0,
		211,212,3,30,15,0,212,213,5,47,0,0,213,214,3,86,43,0,214,215,5,39,0,0,
		215,220,3,20,10,0,216,217,5,42,0,0,217,218,3,16,8,0,218,219,5,43,0,0,219,
		221,1,0,0,0,220,216,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,5,
		38,0,0,223,27,1,0,0,0,224,225,7,3,0,0,225,29,1,0,0,0,226,244,5,23,0,0,
		227,244,5,24,0,0,228,244,5,11,0,0,229,244,5,12,0,0,230,244,5,13,0,0,231,
		244,5,14,0,0,232,244,5,15,0,0,233,244,5,16,0,0,234,244,5,17,0,0,235,244,
		5,18,0,0,236,244,5,19,0,0,237,244,5,20,0,0,238,244,5,21,0,0,239,244,5,
		22,0,0,240,244,5,25,0,0,241,244,3,92,46,0,242,244,3,94,47,0,243,226,1,
		0,0,0,243,227,1,0,0,0,243,228,1,0,0,0,243,229,1,0,0,0,243,230,1,0,0,0,
		243,231,1,0,0,0,243,232,1,0,0,0,243,233,1,0,0,0,243,234,1,0,0,0,243,235,
		1,0,0,0,243,236,1,0,0,0,243,237,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,
		0,243,240,1,0,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,31,1,0,0,0,245,248,
		5,26,0,0,246,249,3,34,17,0,247,249,3,38,19,0,248,246,1,0,0,0,248,247,1,
		0,0,0,249,250,1,0,0,0,250,251,5,38,0,0,251,33,1,0,0,0,252,257,3,36,18,
		0,253,254,5,49,0,0,254,256,3,36,18,0,255,253,1,0,0,0,256,259,1,0,0,0,257,
		255,1,0,0,0,257,258,1,0,0,0,258,35,1,0,0,0,259,257,1,0,0,0,260,266,3,96,
		48,0,261,264,5,27,0,0,262,265,3,96,48,0,263,265,5,28,0,0,264,262,1,0,0,
		0,264,263,1,0,0,0,265,267,1,0,0,0,266,261,1,0,0,0,266,267,1,0,0,0,267,
		37,1,0,0,0,268,273,3,98,49,0,269,270,5,49,0,0,270,272,3,98,49,0,271,269,
		1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,39,1,0,0,0,
		275,273,1,0,0,0,276,281,3,54,27,0,277,281,3,42,21,0,278,281,3,60,30,0,
		279,281,3,62,31,0,280,276,1,0,0,0,280,277,1,0,0,0,280,278,1,0,0,0,280,
		279,1,0,0,0,281,41,1,0,0,0,282,283,5,29,0,0,283,284,3,80,40,0,284,285,
		3,44,22,0,285,43,1,0,0,0,286,290,5,44,0,0,287,289,3,46,23,0,288,287,1,
		0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,
		292,290,1,0,0,0,293,294,5,45,0,0,294,45,1,0,0,0,295,299,3,8,4,0,296,299,
		3,48,24,0,297,299,3,72,36,0,298,295,1,0,0,0,298,296,1,0,0,0,298,297,1,
		0,0,0,299,47,1,0,0,0,300,301,3,74,37,0,301,303,5,39,0,0,302,304,5,52,0,
		0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,3,96,48,0,306,
		308,3,50,25,0,307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,
		5,38,0,0,310,49,1,0,0,0,311,312,5,42,0,0,312,317,3,52,26,0,313,314,5,49,
		0,0,314,316,3,52,26,0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,
		317,318,1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,321,5,43,0,0,321,51,
		1,0,0,0,322,323,3,10,5,0,323,324,5,39,0,0,324,325,3,68,34,0,325,53,1,0,
		0,0,326,327,5,30,0,0,327,328,3,78,39,0,328,329,3,56,28,0,329,55,1,0,0,
		0,330,334,5,44,0,0,331,333,3,58,29,0,332,331,1,0,0,0,333,336,1,0,0,0,334,
		332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,338,5,
		45,0,0,338,57,1,0,0,0,339,349,3,14,7,0,340,349,3,42,21,0,341,349,3,54,
		27,0,342,349,3,60,30,0,343,349,3,8,4,0,344,349,3,22,11,0,345,349,3,26,
		13,0,346,349,3,32,16,0,347,349,3,72,36,0,348,339,1,0,0,0,348,340,1,0,0,
		0,348,341,1,0,0,0,348,342,1,0,0,0,348,343,1,0,0,0,348,344,1,0,0,0,348,
		345,1,0,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,59,1,0,0,0,350,351,5,32,
		0,0,351,352,3,92,46,0,352,357,5,44,0,0,353,356,3,14,7,0,354,356,3,72,36,
		0,355,353,1,0,0,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,
		358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,361,5,45,0,0,361,61,1,
		0,0,0,362,363,5,31,0,0,363,364,3,88,44,0,364,368,5,44,0,0,365,367,3,64,
		32,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,
		371,1,0,0,0,370,368,1,0,0,0,371,372,5,45,0,0,372,63,1,0,0,0,373,377,3,
		8,4,0,374,377,3,66,33,0,375,377,3,72,36,0,376,373,1,0,0,0,376,374,1,0,
		0,0,376,375,1,0,0,0,377,65,1,0,0,0,378,379,5,33,0,0,379,380,3,90,45,0,
		380,382,5,40,0,0,381,383,5,34,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,
		384,1,0,0,0,384,385,3,92,46,0,385,386,5,41,0,0,386,387,5,35,0,0,387,389,
		5,40,0,0,388,390,5,34,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,
		0,0,391,392,3,92,46,0,392,403,5,41,0,0,393,398,5,44,0,0,394,397,3,8,4,
		0,395,397,3,72,36,0,396,394,1,0,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,
		396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,404,5,
		45,0,0,402,404,5,38,0,0,403,393,1,0,0,0,403,402,1,0,0,0,404,67,1,0,0,0,
		405,418,3,76,38,0,406,408,7,4,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,
		409,1,0,0,0,409,418,3,96,48,0,410,412,7,4,0,0,411,410,1,0,0,0,411,412,
		1,0,0,0,412,413,1,0,0,0,413,418,3,102,51,0,414,418,3,98,49,0,415,418,3,
		100,50,0,416,418,3,70,35,0,417,405,1,0,0,0,417,407,1,0,0,0,417,411,1,0,
		0,0,417,414,1,0,0,0,417,415,1,0,0,0,417,416,1,0,0,0,418,69,1,0,0,0,419,
		426,5,44,0,0,420,421,3,74,37,0,421,422,5,50,0,0,422,423,3,68,34,0,423,
		425,1,0,0,0,424,420,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,
		0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,430,5,45,0,0,430,71,1,0,0,0,
		431,432,5,38,0,0,432,73,1,0,0,0,433,436,5,57,0,0,434,436,3,104,52,0,435,
		433,1,0,0,0,435,434,1,0,0,0,436,75,1,0,0,0,437,442,3,74,37,0,438,439,5,
		48,0,0,439,441,3,74,37,0,440,438,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,
		0,442,443,1,0,0,0,443,77,1,0,0,0,444,442,1,0,0,0,445,446,3,74,37,0,446,
		79,1,0,0,0,447,448,3,74,37,0,448,81,1,0,0,0,449,450,3,74,37,0,450,83,1,
		0,0,0,451,452,3,74,37,0,452,85,1,0,0,0,453,454,3,74,37,0,454,87,1,0,0,
		0,455,456,3,74,37,0,456,89,1,0,0,0,457,458,3,74,37,0,458,91,1,0,0,0,459,
		461,5,48,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,467,1,0,0,0,462,463,3,
		74,37,0,463,464,5,48,0,0,464,466,1,0,0,0,465,462,1,0,0,0,466,469,1,0,0,
		0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,1,0,0,0,470,
		471,3,78,39,0,471,93,1,0,0,0,472,474,5,48,0,0,473,472,1,0,0,0,473,474,
		1,0,0,0,474,480,1,0,0,0,475,476,3,74,37,0,476,477,5,48,0,0,477,479,1,0,
		0,0,478,475,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,
		483,1,0,0,0,482,480,1,0,0,0,483,484,3,80,40,0,484,95,1,0,0,0,485,486,5,
		56,0,0,486,97,1,0,0,0,487,488,7,5,0,0,488,99,1,0,0,0,489,490,5,54,0,0,
		490,101,1,0,0,0,491,492,5,55,0,0,492,103,1,0,0,0,493,494,7,6,0,0,494,105,
		1,0,0,0,45,112,114,126,147,149,154,164,173,188,190,203,220,243,248,257,
		264,266,273,280,290,298,303,307,317,334,348,355,357,368,376,382,389,396,
		398,403,407,411,417,426,435,442,460,467,473,480
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
